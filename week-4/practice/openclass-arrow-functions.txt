//Convert the following function into an arrow function. Refer to the new function as xor.
function myFunction(num1, num2){
	return num1 ^ num2;
}

//Start arrow function with template literal
let xor = (num1, num2) => `${num1 ^ num2}`;

//console.log(xor(2, 3));

//Start arrow function without template literal
let xor = (num1, num2) => num1 ^ num2;



/Convert the following function into an arrow function. Refer to the new function as pythagoras.
function myFunction(num1, num2) {
	return Math.sqrt((num1*num2)+(num2*num2));
}

//Start arrow function
let pythagoras = (num1, num2) => Math.sqrt((num1 * num2) + (num2 * num2));

//console.log(pythagoras(4, 7));



//Convert the following function into an arrow function. Refer to the new function as returnSum.
function addTwoInputs(a,b) {
	return a+b;
}

let returnSum = (a, b) => a + b;

console.log(returnSum(4, 6));



///Convert the following function into an arrow function. Refer to the new function as revert.
function myFunction(value){
	return !value;
}

let revert = (value) => !value;


console.log(revert(1)) //returns false
console.log(revert(0)) //returns true



//Convert the following function into an arrow function. Refer to the new function as returnSquareRoot.
function myFunction(num) {
	return Math.sqrt(num);
}

let returnSquareRoot = (num) => Math.sqrt(num);

console.log(returnSquareRoot(a));



//Convert the following function into an arrow function. Refer to the new function as fancyAlgorithm.
function myFunction(num1, num2, num3) {
	let value = 0;
	for(let i = 0; i < num3; i++){
		value = (value + num2) * num1;
	}
	return value / (num1 * (num3 * 10));
}


let fancyAlgorithm = (num1, num2, num3) => {
	let value = 0;
	for(let i = 0; i < num3; i++){
		value = (value + num2) * num1;
	}
	return value / (num1 * (num3 * 10));
}




console.log(fancyAlgorithm(15, 12, 13));



//Convert the following function into an arrow function. Refer to the new function as monthlyPayment.
function myFunction(yearlyPayment){
	let monthly = yearlyPayment / 12;
	return monthly.toFixed(2);
}


let monthlyPayment = (yearlyPayment) => {
	let monthly = yearlyPayment / 12;
	return monthly.toFixed(2);
}

console.log(monthlyPayment(150));



//Mastery Question: Which of the following is the correct syntax when no arguments are passed?
//Correct answer:
//let myFunction = () => return "Test Successful!";




//Convert the following function into an arrow function. Refer to the new function as returnNumber.Note: The returned value is a template literal. Remember to use backticks.
function myFunction(num) {
	return `Your number is $(num)`;
}


let returnNumber = (num) => `Your number is ${num}`;






